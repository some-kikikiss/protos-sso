// proto/sso/sso.proto

// Версия ProtoBuf
syntax = "proto3";

// Текущий пакет - указывает пространство имен для сервиса и сообщений. Помогает избегать конфликтов имен.
package auth;

// Настройки для генерации Go кода.
option go_package = "some-kikikiss.sso.v1;ssov1";

// Auth is service for managing permissions and roles.
service Auth {
  // Register registers a new user.
  rpc Register (RegisterRequest) returns (RegisterResponse);
  // Login logs in a user and returns an auth token.
  rpc Login (LoginRequest) returns (LoginResponse);
  rpc isAdmin (IsAdminRequest) returns (IsAdminResponse);
}


// service Permissions {
//    GetUserPermissions(GetUserPermissionsRequest) return UserPermissions
// }

// Объект, который отправляется при вызове RPC-метода (ручки) Register.
message RegisterRequest {
  string email = 1; // Email of the user to register.
  string password = 2; // Password of the user to register.
  repeated float keyPressTimes = 3; // Key press times of the user to register.
  repeated float keyPressIntervals = 4; // Key press intervals of the user to register.
}

// Объект, который метод (ручка) вернёт.
message RegisterResponse {
  int64 user_id = 1; // User ID of the registered user.
}

// То же самое для метода Login()
message LoginRequest {
  string email = 1; // Email of the user to login.
  string password = 2; // Password of the user to login.
  repeated float keyPressTimes = 3; // Key press times of the user to register.
  repeated float keyPressIntervals = 4; // Key press intervals of the user to register.
  int32 app_id = 5; // ID of the app to login to.
}

message LoginResponse {
  string token = 1; // Auth token of the logged in user.
}

message IsAdminRequest {
  int64 user_id = 1; // ID of the user to check.
}

message IsAdminResponse {
  bool isAdmin = 1; // Is the user an admin?
}